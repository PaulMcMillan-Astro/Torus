################################################################################
#
#  README file for the Torus Mapper code, TM 
#
# Code written by Walter Dehnen 1994-1997
#                 Paul McMillan 2006-
# If there are issues, contact Paul McMillan <paul@astro.lu.se>
#
################################################################################

This code requires Sanjib Sharma's ebf format for c++
(http://sourceforge.net/projects/ebfformat/files/libebf/c-cpp/)

This should be installed in a neighbouring directory to this one. Unzip the 
directory there, then run: 

./configure --prefix=$PWD
make
make install

This needs to be done before making the torus code. If you install ebf
in a different directory, you'll need to change the makefile in this
directory such that EBFINC and EBFLIB point to the correct directories.

If this has been done, everything _should_ compile with simply the 
command "make". This will compile: 

1) obj/libWD.a, comprising general library code from Walter
Dehnen.

2) obj/libOther.a, comprising my general library code. It include
PJMCoords which converts between various coordinate sytems (Galactocentric and
Heliocentric). 

3) obj/libPot.a, comprising code that works out various potentials (and
derivatives etc). The most important is probably falPot, which is used to work
out potentials for exponential discs and spheroids with broken power law density
profiles. falPot_Documentation.pdf gives some details on how to use it (though
the compilation part is wrong).

4) obj/libTorus.a, comprising the various bits of underlying Torus code
(that work out the parameters of a Torus model, and do all the work converting
between coordinate systems). The key class is Torus (as you might expect), which
collects everything together.

5) Example executables (in bin).

The inputs required for any piece of example code can be found by running it
with no arguments. The various executables are:

testfalPot: does simple things with falPot as examples.

AUTOTORUS: Finds a torus given input potential and Actions

AUTOTORI: Finds a many tori given input potential and list of Actions.

GiveListProps: Gives desired properties (e.g. actions, frequencies) of all tori
in a TorusList.

READLIST: Gives all info about a single torus on a TorusList.

Choose_any_df: Picks actions randomly from a given df using a Metropolis
algorithm. Output is a list of actions, df values, and number of steps that the
MCMC chain stayed at that action (N_MCMC).

Create_DF_tori: Takes an output from Choose_any_df, and gives out a TorusList
with those actions, of a required size.

Sample_list_limits: Samples randomly from the tori in a TorusList output from
Create_DF_tori.

Orbit_basic: Takes input positions and velocities (in the same
coordinates as the output from Sample_list_limits). Integrates their
orbits in given potential, giving output at up to 5 times given by
user.

Coord_converter: Converts input points into different coordiate
systems (Galactocentric or Heliocentric). 

CompareTorusIntegrated compares orbits found from a torus model to
theose found by integrating the equations of motion.

CompareTorusIntegrated_SOS compares surfaces of section at z=0 from a
torus models and from integrated orbits.

SmoothStreamMaker gives positions and velocities of stars in a stream
assuming a simple model for stream formation.

The shell script Simple_Survey.csh runs a simple example set of programmes.

The additional machinery described in Binney (2017) requires special compilation. See readme.txt in the src/ directory for details. 