################################################################################
#
# make.torus
#
# dependencies & rules for routines related to the torus project
#
# macros that depend on the architecture etc, such as CFLAGS, LDFLAG ...,
# have to be defined elsewhere.
#
################################################################################
#
# 0   macros
#


ARTOR     = $(AR) $(LIB)libTorus.a $@; $(RL) $(LIB)libTorus.a
ARPOT     = $(AR) $(LIB)libTorus.a $@; $(RL) $(LIB)libTorus.a
AROTHER   = $(AR) $(LIB)libTorus.a $@; $(RL) $(LIB)libTorus.a
ARLIB	  = $(AR) $(LIB)libTorus.a $@; $(RL) $(LIB)libTorus.a

#ARPOT     = $(AR) $(LIB)libPot.a $@;	$(RL) $(LIB)libPot.a
#AROTHER   = $(AR) $(LIB)libOther.a $@; $(RL) $(LIB)libOther.a
#ARLIB	  = $(AR) $(LIB)libWD.a $@; $(RL) $(LIB)libWD.a

################################################################################
#
# 1   header files
# 1.1 header files: from other directories
#

Pi_h		   = $(INCL)Pi.h
WDMath_h	   = $(INCL)WDMath.h
Random_h	   = $(INCL)Random.h
Compress_h	   = $(INCL)Compress.h
FreeMemory_h	   = $(INCL)FreeMemory.h
Vector_h	   = $(INCL)Vector.h
Matrix_h	   = $(INCL)Matrix.h $(Vector_h)
Numerics_templates = $(INCL)Numerics.templates $(Matrix_h)
Numerics_h	   = $(INCL)Numerics.h $(Matrix_h) $(Pi_h) $(Numerics_templates)
Pspline_h	   = $(INCL)Pspline.h $(FreeMemory_h) $(Numerics_h)
PJMNum_h	   = $(SRCUTILS)PJMNum.h
PJMebf_h	   = $(SRCUTILS)PJMebf.h
CHB_h		   = $(SRCUTILS)CHB.h

AUXIL_H		   = $(Pi_h) $(Random_h) $(Compress_h)   \
			$(FreeMemory_h) $(Vector_h) $(Matrix_h) \
			$(Numerics_templates) $(Numerics_h) $(Pspline_h) \
			$(PJMNum_h) $(CHB_h)

#
# 1.2 header files: basic & the torus machinery
#

Err_h 		= $(SRCUTILS)Err.h
Units_h 	= $(SRCUTILS)Units.h
Types_h 	= $(SRCUTILS)Types.h
Constants_h	= $(SRCUTILS)Constants.h $(Units_h)
PJMCoords_h	= $(SRCUTILS)PJMCoords.h $(Constants_h)
Potential_h 	= $(INC)Potential.h $(Types_h)
Maps_h		= $(INC)Maps.h $(Pi_h) $(Err_h) $(Types_h)
GeneratingFunctions_h = $(INC)GeneratingFunctions.h $(Maps_h)
Toy_Isochrone_h	= $(INC)Toy_Isochrone.h $(Maps_h)
Point_ClosedOrbitCheby_h	= $(INC)Point_ClosedOrbitCheby.h $(Maps_h) $(CHB_h)
Point_None_h		= $(INC)Point_None.h $(Maps_h)
PointTrans_h	= $(Point_ClosedOrbitCheby_h) $(Point_None_h)
Orb_h		= $(INC)Orb.h $(Maps_h) $(Potential_h) $(Numerics_h)
Fit_h		= $(INC)Fit.h $(Maps_h) $(Potential_h)
Torus_h		= $(INC)Torus.h	$(Maps_h) $(Vector_h) $(Matrix_h) \
			$(Potential_h) $(PJMCoords_h)
#IntegClasses_h	= $(INC)IntegClasses.h $(Torus_h) $(GCstar_h)
DF_h		= $(INC)DF.h

#
# 1.3 header files: the potentials
#
IsochronePot_h		= $(SRCPOT)IsochronePot.h $(Potential_h)
KeplerPot_h		= $(SRCPOT)KeplerPot.h $(Potential_h)
StackelPot_h		= $(SRCPOT)StackelPot.h $(Potential_h)
MiyamotoNagaiPot_h	= $(SRCPOT)MiyamotoNagaiPot.h $(Potential_h)
LogPot_h		= $(SRCPOT)LogPot.h $(Potential_h)
falPot_h		= $(SRCPOT)falPot.h $(Potential_h)
MultiPot_h		= $(SRCPOT)MultiPot.h $(Potential_h)

#
# 1.5 header files: pseudo targets
#

BASIC_H		= $(Units_h) $(Types_h) $(PJMCoords_h)
TORFIT_H	= $(BASIC) $(Maps_h) $(Torus_h) $(Fit_h) $(GeneratingFunctions_h) \
		  $(Toy_Isochrone_h) $(PointTrans_h) $(IntegClasses_h) $(DF_h) $(AUXIL_H)
GALPOT_H	= $(Potential_h) $(StackelPot_h) $(LogPot_h) $(IsochronePot_h) \
			$(MiyamotoNagaiPot_h) $(falPot_h) $(MultiPot_h) $(KeplerPot_h) \
			$(AUXIL_H)
OTHER_H		= $(AUXIL_H)

################################################################################
#
# modules: standard version
#


$(OBJ)Random.o:		$(SRCUTILS)Random.cc $(Random_h) $(Numerics_h)
			$(CPP) $(CFLAGS_WD) $< ; $(ARLIB)

$(OBJ)Numerics.o:	$(SRCUTILS)Numerics.cc $(Numerics_h) $(FreeMemory_h)
			$(CPP) $(CFLAGS_WD) $< ; $(ARLIB)
$(OBJ)WDMath.o:		$(SRCUTILS)WDMath.cc $(WDMath_h)
			$(CPP) $(CFLAGS_WD) $< ; $(ARLIB)
$(OBJ)Compress.o:	$(SRCUTILS)Compress.cc $(Compress_h) $(FreeMemory_h) \
				$(Numerics_h)
			$(CPP) $(CFLAGS_WD) $< ; $(ARLIB)


Library:	$(OBJ)Random.o $(OBJ)Numerics.o $(OBJ)WDMath.o $(OBJ)Compress.o

################################################################################
#
# analysis & other: standard version
#

$(OBJ)CHB.o:	$(SRCUTILS)CHB.cc $(CHB_h)
		$(CPP) $(CFLAGS) $< ; $(AROTHER)
$(OBJ)PJMNum.o:	$(SRCUTILS)PJMNum.cc $(PJMNum_h)
		$(CPP) $(CFLAGS) $< ; $(AROTHER)
$(OBJ)PJMCoords.o:	$(SRCUTILS)PJMCoords.cc $(PJMCoords_h) $(Pi_h)
	$(CPP) $(CFLAGS) $< ; $(AROTHER)
$(OBJ)PJMebf.o:	$(SRCUTILS)PJMebf.cc $(PJMebf_h)
		$(CPP) $(CFLAGS) $< ; $(AROTHER)
$(OBJ)Err.o:	       $(SRCUTILS)Err.cc $(Err_h)
		       $(CPP) $(CFLAGS) $(SRCUTILS)Err.cc; $(ARTOR)

$(OBJ)jjb_utils.o:	$(SRCUTILS)jjb_utils.cc $(SRCUTILS)jjb_utils.h
				$(CPP) $(CFLAGS) $(SRCUTILS)jjb_utils.cc; $(AROTHER)

Other:	$(OBJ)PJMNum.o $(OBJ)CHB.o $(OBJ)PJMCoords.o $(OBJ)PJMebf.o $(OBJ)Err.o $(OBJ)jjb_utils.o




$(OBJ)Fit.o:	       $(SRC)Fit.cc $(Fit_h) $(Err_h) $(Orb_h) $(Numerics_h) \
		       		    $(FreeMemory_h)
		       $(CPP) $(CFLAGS) $(SRC)Fit.cc; $(ARTOR)
$(OBJ)Toy_Isochrone.o:     $(SRC)Toy_Isochrone.cc $(Toy_Isochrone_h) $(Compress_h) $(Numerics_h)
		       $(CPP) $(CFLAGS) $(SRC)Toy_Isochrone.cc; $(ARTOR)

$(OBJ)GeneratingFunction.o:  $(SRC)GeneratingFunction.cc $(GeneratingFunction_h) \
			     		$(Compress_h) $(Numerics_h)
			     $(CPP) $(CFLAGS) $(SRC)GeneratingFunction.cc; $(ARTOR)
$(OBJ)Orb.o:	 $(SRC)Orb.cc $(Orb_h)
		 $(CPP) $(CFLAGS) $(SRC)Orb.cc; $(ARTOR)
$(OBJ)Point_None.o:	 $(SRC)Point_None.cc $(PointTrans_h) $(Compress_h) $(Pi_h) $(WDMath_h)
		 $(CPP) $(CFLAGS) $(SRC)Point_None.cc; $(ARTOR)
$(OBJ)Point_ClosedOrbitCheby.o: $(SRC)Point_ClosedOrbitCheby.cc $(Point_ClosedOrbitCheby_h) $(Compress_h) $(Pi_h) $(WDMath_h)
		 $(CPP) $(CFLAGS) $(SRC)Point_ClosedOrbitCheby.cc; $(ARTOR)
$(OBJ)Torus.o:	 $(SRC)Torus.cc $(Torus_h) $(PointTrans_h) $(Toy_Isochrone_h) \
		 $(Compress_h) $(Numerics_h) $(GeneratingFunction_h)
		 $(CPP) $(CFLAGS) $(SRC)Torus.cc; $(ARTOR)

$(OBJ)resTorus.o: $(SRC)resTorus.cc $(SRC)resTorus.h $(OBJ)Torus.o
		  $(CPP) $(CFLAGS) $(SRC)resTorus.cc; $(ARTOR)

TorFit:	$(OBJ)Fit.o $(OBJ)GeneratingFunction.o 	$(OBJ)Point_ClosedOrbitCheby.o \
	$(OBJ)Toy_Isochrone.o $(OBJ)Orb.o $(OBJ)Point_None.o $(OBJ)Torus.o $(OBJ)resTorus.o

$(OBJ)PassMyGrids.o:	 $(SRC)PassMyGrids.cc $(PassMyGrids_h)
		 $(CPP) $(CFLAGS) $(SRC)PassMyGrids.cc; $(ARTOR)

$(OBJ)RalphTestGrid.o:	 $(SRC)RalphTestGrid.cc $(RalphTestGrid_h)
		 $(CPP) $(CFLAGS) $(SRC)RalphTestGrid.cc; $(ARTOR)

################################################################################
#
# potentials: standard version
#

$(OBJ)StackelPot.o: $(StackelPot_h) $(SRCPOT)StackelPot.cc
	$(CPP) $(CFLAGS) $(SRCPOT)StackelPot.cc; $(ARPOT)
$(OBJ)MiyamotoNagaiPot.o: $(MiyamotoNagaiPot_h) $(SRCPOT)MiyamotoNagaiPot.cc
	$(CPP) $(CFLAGS) $(SRCPOT)MiyamotoNagaiPot.cc; $(ARPOT)
$(OBJ)LogPot.o: $(LogPot_h) $(SRCPOT)LogPot.cc
	$(CPP) $(CFLAGS) $(SRCPOT)LogPot.cc; $(ARPOT)
$(OBJ)MultiPot.o: $(MultiPot_h) $(SRCPOT)MultiPot.cc
	$(CPP) $(CFLAGS) $(SRCPOT)MultiPot.cc; $(ARPOT)
$(OBJ)IsochronePot.o: $(IsochronePot_h) $(SRCPOT)IsochronePot.cc
	$(CPP) $(CFLAGS) $(SRCPOT)IsochronePot.cc; $(ARPOT)
$(OBJ)KeplerPot.o: $(KeplerPot_h) $(SRCPOT)KeplerPot.cc
	$(CPP) $(CFLAGS) $(SRCPOT)KeplerPot.cc; $(ARPOT)
$(OBJ)falPot.o: $(falPot_h) $(SRCPOT)falPot.cc \
	      $(FreeMemory_h) $(Numerics_h) $(Pspline_h)
	      $(CPP) $(CFLAGS) $(SRCPOT)falPot.cc;$(ARPOT)

GalPot:	$(OBJ)falPot.o $(OBJ)MiyamotoNagaiPot.o $(OBJ)StackelPot.o $(OBJ)IsochronePot.o $(OBJ)LogPot.o $(OBJ)MultiPot.o $(OBJ)KeplerPot.o

################################################################################
#
# resTorus objects
#

$(OBJ)pstuff.o: src/resTorusExample/pstuff.cc
		$(CPP) $(CFLAGS) -Isrc/resTorusExample/ src/resTorusExample/pstuff.cc
$(OBJ)getclosed.o: src/resTorusExample/getclosed.cc
		$(CPP) $(CFLAGS) -Isrc/resTorusExample/ src/resTorusExample/getclosed.cc


MAIN_LIBS:	Library TorFit GalPot Other

################################################################################
#
# executables: standard version
#
testfalPot:	$(EXE)testfalPot.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
testMultiPot:	$(EXE)testMultiPot.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
testIsochronePot:	$(EXE)testIsochronePot.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
GiveListProps:	$(EXE)GiveListProps.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
AUTOTORUS:	$(EXE)AUTOTORUS.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
AUTOTORI:	$(EXE)AUTOTORI.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
READLIST:	$(EXE)READLIST.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Choose_any_df:	$(EXE)Choose_any_df.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Create_DF_tori:	$(EXE)Create_DF_tori.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Sample_list_limits:	$(EXE)Sample_list_limits.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Orbit_basic:	$(EXE)Orbit_basic.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Coord_converter:	$(EXE)Coord_converter.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Add_Uncert:	$(EXE)Add_Uncert.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
CompareTorusIntegrated:	$(EXE)CompareTorusIntegrated.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)

CompareTorusIntegrated_SOS:	$(EXE)CompareTorusIntegrated_SOS.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
SmoothStreamMaker:	$(EXE)SmoothStreamMaker.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
GridAndGrid:	$(EXE)GridAndGrid.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
#GridAndGridtest:	$(EXE)GridAndGridtest.cc MAIN_LIBS $(OBJ)PassMyGrids.o
#		$(CPP) $(MFLAGS) $(OBJ)PassMyGrids.o $(EXE)$@.cc $(LDFLAGS)

#RalphTest:	$(EXE)RalphTest.cc MAIN_LIBS $(OBJ)RalphTestGrid.o
#		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)

TestBed:	$(EXE)TestBed.cc MAIN_LIBS $(OBJ)RalphTestGrid.o
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)

DensProfForRS:	$(EXE)DensProfForRS.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)

#Shells:	$(EXE)Shells.cc MAIN_LIBS
#		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)

#SimpleJR:	$(EXE)SimpleJR.cc MAIN_LIBS
#		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)

MakeAStream_J:	$(EXE)MakeAStream_J.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)


# Added for resTorus
drive:	$(EXE)drive.cc MAIN_LIBS $(OBJ)pstuff.o $(OBJ)getclosed.o
	$(CPP) $(MFLAGS) -Isrc/resTorusExample/ $(EXE)$@.cc $(OBJ)pstuff.o $(OBJ)getclosed.o $(LDFLAGS)


mains: Library TorFit GalPot Other testfalPot GiveListProps AUTOTORUS \
       AUTOTORI READLIST Choose_any_df Create_DF_tori \
       Sample_list_limits Orbit_basic Coord_converter Add_Uncert \
       SmoothStreamMaker GridAndGrid CompareTorusIntegrated \
       CompareTorusIntegrated_SOS testMultiPot  MakeAStream_J #drive
